#!/usr/bin/env python3
"""
Final verification test for subscription button fix
"""
import requests
import re

def test_fixed_subscription():
    """Verify the subscription button fix is working"""
    session = requests.Session()
    
    # Login
    login_data = {
        'email': 'debug@test.com',
        'password': 'testpassword123'
    }
    
    print("üîß Testing FINAL subscription button fix...")
    try:
        # Login first
        login_response = session.post('http://127.0.0.1:5006/login', data=login_data, allow_redirects=False)
        
        if login_response.status_code == 302:
            print("‚úÖ Login successful")
            
            # Get profile page
            profile_response = session.get('http://127.0.0.1:5006/profile')
            
            if profile_response.status_code == 200:
                html_content = profile_response.text
                
                # Count function definitions
                upgrade_count = html_content.count('function upgradePlan(')
                downgrade_count = html_content.count('function downgradePlan(')
                global_assignments = html_content.count('window.upgradePlan = upgradePlan')
                
                print(f"üìä Function Analysis:")
                print(f"   - upgradePlan definitions: {upgrade_count} (should be 1)")
                print(f"   - downgradePlan definitions: {downgrade_count} (should be 1)")
                print(f"   - Global assignments: {global_assignments} (should be 1)")
                
                # Check for critical elements
                checks = [
                    ('CRITICAL: Define subscription functions FIRST', 'Functions defined at top'),
                    ('function upgradePlan(plan) {', 'upgradePlan function exists'),
                    ('window.upgradePlan = upgradePlan;', 'Global assignment exists'),
                    ('console.log(\'‚úÖ Subscription functions defined', 'Success message'),
                    ('onclick="try { console.log(\'Pro button clicked\'); upgradePlan(\'Pro\');', 'Button onclick handler')
                ]
                
                all_good = True
                for pattern, description in checks:
                    if pattern in html_content:
                        print(f"‚úÖ {description}")
                    else:
                        print(f"‚ùå Missing: {description}")
                        all_good = False
                
                # Check structure
                script_start = html_content.find('{% block extra_js %}')
                upgrade_func_pos = html_content.find('function upgradePlan(')
                button_pos = html_content.find('upgradePlan(\'Pro\')')
                
                if script_start < upgrade_func_pos < button_pos:
                    print("‚úÖ Correct order: Script block ‚Üí Function definition ‚Üí Button usage")
                else:
                    print("‚ùå Incorrect order detected")
                    all_good = False
                
                if all_good and upgrade_count == 1 and global_assignments == 1:
                    print("\nüéâ SUCCESS! The subscription button fix is complete!")
                    print("‚úÖ Functions are defined exactly once")
                    print("‚úÖ Functions are defined at the top of the script")
                    print("‚úÖ Functions are made globally accessible")
                    print("‚úÖ Button onclick handlers should now work")
                    print("\nüî• Ready for browser testing!")
                else:
                    print(f"\n‚ö†Ô∏è  Issues detected. Function counts: upgrade={upgrade_count}, global={global_assignments}")
                    
            else:
                print(f"‚ùå Failed to get profile page: {profile_response.status_code}")
        else:
            print(f"‚ùå Login failed: {login_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    test_fixed_subscription()
