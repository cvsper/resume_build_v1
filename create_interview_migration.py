#!/usr/bin/env python3
"""
Create a proper migration for interview tables
"""
import os
from datetime import datetime

def create_interview_migration():
    """Create migration file for interview tables"""
    
    # Generate timestamp for migration filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    migration_content = f'''"""Add interview session and answer tables

Revision ID: {timestamp}
Revises: 168b9bb8f9d4
Create Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")}

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '{timestamp}'
down_revision = '168b9bb8f9d4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create interview_session table
    op.create_table('interview_session',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('job_title', sa.String(length=150), nullable=False),
    sa.Column('interviewer_personality', sa.String(length=50), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('current_question', sa.Integer(), nullable=True),
    sa.Column('total_score', sa.Float(), nullable=True),
    sa.Column('final_feedback', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create interview_answer table
    op.create_table('interview_answer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('question_number', sa.Integer(), nullable=False),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('answer_score', sa.Float(), nullable=True),
    sa.Column('ai_feedback', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['interview_session.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('interview_answer')
    op.drop_table('interview_session')
    # ### end Alembic commands ###
'''

    # Create the migration file
    migrations_dir = "/Users/sevs/Documents/Leads/resume_build_v1/migrations/versions"
    filename = f"{timestamp}_add_interview_session_and_answer_tables.py"
    filepath = os.path.join(migrations_dir, filename)
    
    with open(filepath, 'w') as f:
        f.write(migration_content)
    
    print(f"✅ Created migration file: {filename}")
    return filepath

if __name__ == "__main__":
    try:
        filepath = create_interview_migration()
        print(f"Migration created at: {filepath}")
        print("\nTo apply this migration in production:")
        print("1. Deploy the new migration file")
        print("2. Run: flask db upgrade")
        print("3. Verify tables exist: interview_session, interview_answer")
    except Exception as e:
        print(f"❌ Error creating migration: {e}")